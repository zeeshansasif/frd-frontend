/// Assign the right properties in order to fill
/// and SVG item.
/// ---
/// @group Abstracts
/// @access public
/// @param {String} $color - color to fill with
/// @output 'fill', 'color'
@mixin fill($color) {
    fill: $color;
    color: $color;

    use > svg {
        fill: $color;
        color: $color;
    }
}
/// This is used by old components, we should
/// double check and see if we still need
/// it or we can just get rid of it.
/// ---
/// @group Abstracts
/// @access public
/// @param {String} $from - color to start with
/// @param {String} $to - color to end with
@mixin lineargradient ($from, $to) {
    background-color: $to;
    background-image: linear-gradient( to bottom, $from, $to );
    background-image: -webkit-gradient( linear, left top, left bottom, from($from), to($to));
    background-image: -webkit-linear-gradient(top, $from, $to);
    background-image:    -moz-linear-gradient(top, $from, $to);
    background-image:     -ms-linear-gradient(top, $from, $to);
    background-image:      -o-linear-gradient(top, $from, $to);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
    zoom: 1;
}

/// Adds the necessary properties in order to create
/// an inner clear of floating elements.
/// ---
/// @group Abstracts
/// @access public
@mixin clearfix() {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

/// Make a context based selector a little more friendly
/// an inner clear of floating elements.
/// ---
/// @group Abstracts
/// @access public
/// @param {String} $content
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

@mixin optional-at-root($sel) {
    @at-root #{if(not &, $sel, selector-append(&, $sel))} {
        @content;
    }
}

/// Create the necessary pseudo selectors
/// for cross-browser placeholder support.
/// ---
/// @group Abstracts
/// @access public
@mixin placeholder {
    @include optional-at-root('::-webkit-input-placeholder') {
        @content;
    }

    @include optional-at-root(':-moz-placeholder') {
        @content;
    }

    @include optional-at-root('::-moz-placeholder') {
        @content;
    }

    @include optional-at-root(':-ms-input-placeholder') {
        @content;
    }
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin radius($radius) {
    -webkit-border-radius: $radius; 
    -ms-border-radius: $radius;
    -o-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}
@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}
  
@mixin transform($property) {
    -webkit-transform: $property;
    -ms-transform: $property;
    -moz-transform: $property;
    -o-transform: $property;
    transform: $property;
}
